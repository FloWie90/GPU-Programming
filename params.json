{"name":"OpenCL Wrapper","tagline":"Fast OpenCL Programming using C++ features","body":"## Introduction.\r\n\"OpenCL is the first open, royalty-free standard for cross-platform, parallel programming of modern processors found in personal computers, servers and handheld/embedded devices.\" The OpenCL standard defines an API and also provides a programming language (C-dialect if you want) with which application specific functions (called kernels) can be defined. All in all, the standard provides a convenient way to write task and data-parallel programs for a heterogeneous computing environment. Given the necessary OpenCL library from some vendors, one can choose the desired platform and let some of its kernels run on the devices of the platform. For more details, see http://www.khronos.org/opencl/.\r\n\r\n## Motivation\r\nHowever, the utilization of the API of the OpenCL Standard can be tedious. Loading kernels and compiling for different divices and platforms requires many lines of code. This blog is for everyone who is interested in fast OpenCL programming. You only need to download, fork or clone an OpenCL wrapper at https://github.com/ti6csb/OpenCL-Wrapper which takes the burden of all the unconvenient function calls and pointer stuff. Many C++11 features have been used to provide a comfortable API. It requires only a tiny OpenCL wrapper which covers most of the OpenCL standard but provides you with C++ Objects. You will have the following benefits if you use this wrapper.\r\n\r\n* **One-To-One mapping** of OpenCL and C++ objects. You won't need any extra work to understand the wrapper nomenclature if you are acquainted with the OpenCL concepts.\r\n* **Fast instantiation** of all available platforms and devices. Querying and printing is a one-liner.\r\n* Object instantation and allocation is managed by the **RAII principle**. Just instantiate the C++ object and don't worry about any memory leakage or deallocation.\r\n* **Fast integration** of data-parallel kernels. Write you kernels in separate files pass them to the program. All file handling is done for you.\r\n* All examples have **less than 50 lines** of code even if you have to manage multiple events. You will start to write your kernels within the next hours and test your data-parallel algorithm.\r\n\r\n## Installation\r\n### Preliminary\r\n* You need to install and locate the OpenCL library\r\n* You need to have a g++ version >= 4.7\r\n* You need to have git and pull from https://github.com/ti6csb/OpenCL-Wrapper\r\n\r\n### Create Library\r\nOnce you know where your OpenCL library from your vendor is located, you only need to \r\n\r\n1. Adjust the library.mk and fill in the library location. You will see already some common paths for Intel, AMD and Nvidia on Linux platforms.\r\n2. Let OPENCL_WRAPPER_DIR be the location of the cloned project. Then just \r\n```\r\ncd $OPENCL_WRAPPER_DIR/Code\r\nmake\r\n```\r\n\r\nNow the static library oclWrapper.a is build in $OPENCL_WRAPPER_DIR/Code/lib and you may integrate it.\r\n\r\n### Create Examples\r\nOnce you have build the library, you can build the examples. Then just\r\n```\r\ncd $OPENCL_WRAPPER_DIR/Tutorial \r\nmake\r\n```\r\nNote that the makefiles read the library.mk, so adjusting the library.mk is enough.\r\n\r\n### Tutorials\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}